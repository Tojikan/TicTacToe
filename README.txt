---------------Tic Tac Pro------------------- 
by Andrew Qian

------How To-----------
1. Start Game in /Build or in Unity Editor navigating to the main scene in the assets folder with Unity
2. Select character icons. Click on an already selected one to deselect (you can't proceed unless both are clicked)
3. Select Grid Size.
4. Play Game
5. Probably get a draw
6. Start a new game by the menu at the end of a game or by the menu in the top left
7. Enjoy!!!



Two player Tic Tac Toe Game built in Unity 3D with a single mouse input.
Select from 4 different icons to represent your piece. Then select a grid to start playing. Alternate between players sharing the same mouse.
Player 1 goes first by default. After that it's loser goes first. 

Game supports multiple sizes of grids. In this game, there's options from a 3x3 standard tic tac toe all the way to 8x8.
You can play directly from the Standalone player in the Build folder or from by finding the 'Main' Scene in the Assets folder. Game only has one scene. 


All matches and move history are saved.





/***Game Architecture***/
The game was designed with the ability to select different grid sizes and with the ability to save move history in mind.
There's a few key components here: 

- Game Manager is half of a 'Controller' class that manages the flow of the game. It's responsible for tracking whose player's turn it is and then calling different methods from other classes in the game. The Game Manager itself does not directly control the flow - its methods are called via Unity UI buttons when the player clicks. 

- The Game UI is split into two parts - Menu UI and Game UI. The menu UI is just the menu that pops up at the start of the game or the victory window that pops up at the end of a match. This menu lets you change the settings game and directly feeds that data into the Game Manager, which will then call BoardState and BoardGenerator to generate the game. The game UI is just the UI that players see when in a game. The menu UI and its windows and the game switch via a pretty simple fixed state - it'll enable and disable the other panels as needed.

- BoardState is a static class that handles the main game logic and contains all the information about the current state of the game board. Player moves are stored into a 2D Array. When a player clicks on a spot, information on which square was clicked is saved into a 2D array. BoardState also contains the methods to check if the game is over or in a draw. It checks this after every move inputted by a player - first checking the horizontal/vertical rows that touch the square and then checking if it is in a square that can result in a diagonal win. If it is, it will then check diagonally. 

- The view is generated by board generator, which just instantiates a bunch of EmptyTile objects according to a dimension. The EmptyTiles store the data of which square it is in the grid which is retrieved when it is clicked on. The empty tiles remove themselves after every click.  

- Player Controller controls the player input. The only thing it checks for is whether you're clicking on an empty space in the grid during a time when input is allowed. Then it'll mark the location in BoardState and create a tile based on whose turn it is currently in GameManager. It checks after every move. 

- Rest are other simple classes that manages specific job in the game. Player Icons are set via a ScriptableObject - just a simple array of prefabs.


- MatchData is the struct that all match information is saved in. It'll store things such as the player icons and which player started the match. The player moves are recorded into two separate arrays which represent the moves of the first player and second player. NOTE: that first player and second player DO NOT refer to P1 and P2 but rather the first player who moved in the match. You can then reconstruct the game by using the playerStart variable as a key to determine who went first.

TL;DR - Player inputs game parameters into the UI -> Game Manager calls other classes to generate the board -> BoardState has a 2D array that is used to check whose winning -> People click spaces and add things to the array and we check if we win -> Play again by once again calling Game Manager.

/****               ***/

/**Things of Note***/
- No animations are in yet. 
- The soundmanager is a basic implementation and will be revisited later.
- Each game returns a int code to determine the result of the game
 - 0: Winner undetermined. This is the default initial value. You could also arrive at this by starting a new game in the midst of a current game.
 - 1: Player 1 victory
 - 2: Player 2 victory
 - 3: Draw
 - 4: Error - Something went wrong writing to the BoardState Array. Used earlier to test parts of the game but it's still there. The only way you can get an error is if for some reason you couldn't write to the array. 
Not sure when that would ever happen but it's reassuring to know its there.

- Player moves are stored as Vector2s ranging from 0,0 up.
	- If you get a -1,-1: that means the player surrendered
	- If you get a -2, -2: that means the game was ended that turn with no surrender.

All Music and Sound Assets are downloaded with open licenses and can probably be found by googling open game music/sounds. 
/*************/

